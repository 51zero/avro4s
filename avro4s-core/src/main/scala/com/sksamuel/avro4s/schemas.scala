package com.sksamuel.avro4s

import com.sksamuel.avro4s.SchemaConfiguration
import com.sksamuel.avro4s.schemas.{ByteIterableSchemas, CollectionSchemas, DateSchemas, EitherSchemas, EnumSchemas, MagnoliaDerivedSchemas, OptionSchemas, PrimitiveSchemas, StringSchemas, TupleSchemas}
import org.apache.avro.util.Utf8
import org.apache.avro.{LogicalType, LogicalTypes, Schema, SchemaBuilder}

import java.nio.ByteBuffer
import java.sql.Timestamp
import java.time.{Instant, LocalDate, LocalDateTime, OffsetDateTime}
import java.util
import java.util.{Date, UUID}

/**
  * A [[SchemaFor]] generates an Avro Schema for a Scala or Java type.
  *
  * For example, a SchemaFor[String] could return a schema of type Schema.Type.STRING, and
  * a SchemaFor[Int] could return an schema of type Schema.Type.INT
  */
trait SchemaFor[T] {

  /**
    * Returns the avro [[Schema]] generated by this typeclass.
    */
  def schema(config: SchemaConfiguration): Schema

  /**
    * Changes the type of this SchemaFor to the desired type `U` without any other modifications.
    *
    * @tparam U new type for SchemaFor.
    */
  def forType[U]: SchemaFor[U] = map[U](identity)

  /**
    * Creates a SchemaFor[U] by applying a function Schema => Schema
    * to the schema generated by this instance.
    */
  def map[U](fn: Schema => Schema): SchemaFor[U] = {
    val self = this
    return new SchemaFor[U] {
      override def schema(config: SchemaConfiguration) = fn(self.schema(config))
    }
  }
}

object SchemaFor
  extends PrimitiveSchemas
  with ByteIterableSchemas
  with DateSchemas
  with CollectionSchemas
  with TupleSchemas
  with EnumSchemas
  with EitherSchemas
  with BigDecimalSchemas
  with OptionSchemas
  with StringSchemas
  with MagnoliaDerivedSchemas {

  /**
    * Returns a [[SchemaFor]] with the schema set to the given schemas.
    */
  def apply[T](s: Schema): SchemaFor[T] = new SchemaFor[T] {
    override def schema(config: SchemaConfiguration): Schema = s
  }

  def apply[T](f: SchemaConfiguration => Schema) = new SchemaFor[T] {
    override def schema(config: SchemaConfiguration): Schema = f(config)
  }

  def apply[T](using schemaFor: SchemaFor[T]): SchemaFor[T] = schemaFor
}